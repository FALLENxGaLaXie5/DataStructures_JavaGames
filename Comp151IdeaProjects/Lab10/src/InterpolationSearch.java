/**   A class that implements an interpolation search    of a sorted array of integers. Chapter 18 Project 2     @author Joshua Steward   @version 3.0*/public class InterpolationSearch{	/** Searches a portion of a sorted array of integers for a given value.	    @param a      an array of integers sorted into ascending order	    @param first  the integer index of the first array element;	                  first >= 0 and < a.length	    @param last   the integer index of the last array element;	                  last - first >= 1; last < a.length  	    @param desiredItem  the item sought */    /**     * set p and index to startingPoint     *     * base case : if first is greater than last or index is greater than last or index is less than first     *      set found to false     *      else if the desiredItem is equal to the item at index in a     *          set found to true     *      else if the desiredItem is less than the item at index in a     *          found is set to the result of a recursive call interpolationSearch with array a, first, index - 1, and desiredItem     *      else     *          found is set to the result of a recursive call of interpolationSearch with array a, index + 1, last, and desiredItem     *      return found     * @param a     * @param first     * @param last     * @param desiredItem     * @return     */	public static boolean interpolationSearch(int[] a, int first, int last, int desiredItem)	{        boolean found;        double p = ((double)desiredItem - a[first]) / (a[last] - a[first]);        int index = first + (int)Math.ceil((last - first) * p);        if (first > last || index > last || index < first)        {            found = false;        }        else if (desiredItem == a[index])        {            found = true;        }        else if (desiredItem < a[index])        {            found = interpolationSearch(a, first, index - 1, desiredItem);        }        else        {            found = interpolationSearch(a, index + 1, last, desiredItem);        }		return found; // this is a stub	} // end interpolationSearch	// some simple test cases of interpolation seach	public static void main(String[] args) 	{		int a[] = {-10, -5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 						   13, 14, 15, 16, 20, 34, 99, 100, 200, 10000};		System.out.println("Searching the array");		for (int element : a)			System.out.print(element + " ");		System.out.println();			System.out.println();					if (InterpolationSearch.interpolationSearch(a, 0, a.length - 1, 14))			System.out.println("PASSES: 14 was found");		else 			System.out.println("FAILS: 14 was not found");			if (InterpolationSearch.interpolationSearch(a, 0, a.length - 1, -10))			System.out.println("PASSES: -10 was found");		else 			System.out.println("FAILS: -10 was not found");		if (InterpolationSearch.interpolationSearch(a, 0, a.length - 1, 10000))			System.out.println("PASSES: 10000 was found");		else 			System.out.println("FAILS: 10000 was not found");		if (InterpolationSearch.interpolationSearch(a, 0, a.length - 1, 200))			System.out.println("PASSES: 200 was found");		else 			System.out.println("FAILS: 200 was not found");            		if (InterpolationSearch.interpolationSearch(a, 0, a.length - 1, 23456))			System.out.println("FAILS: 23456 was found");		else 			System.out.println("PASSES: 23456 was not found");         		if (InterpolationSearch.interpolationSearch(a, 0, a.length - 1, -6))			System.out.println("FAILS: -6 was found");		else 			System.out.println("PASSES: -6 was not found");        		if (InterpolationSearch.interpolationSearch(a, 0, a.length - 1, 35))			System.out.println("FAILS: 35 was found");		else 			System.out.println("PASSES: 35 was not found");	} // end main} // end Search/*Searching the array-10 -5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 20 34 99 100 200 10000 PASSES: 14 was foundPASSES: -10 was foundPASSES: 10000 was foundPASSES: 200 was foundPASSES: 23456 was not foundPASSES: -6 was not foundPASSES: 35 was not found*/