import java.util.Iterator;/**   This interface describes the operations of a set   @author Charles Hoot, Frank M. Carrano    @version 3/31/2015*/public interface SetInterface<T>{	/** Adds a new entry to this set, avoiding duplicates.	    Increases the number of entries by 1.	    @param newEntry  the object to be added as a new entry	    @return true if the addition is successful, or false if 	            the item already is in the set */	public boolean add(T newEntry);	/** Removes a specific entry from this set.	    Decreases the number of entries by 1.	    @param anEntry  the object to be removed       @return true if the removal was successful, or false if not */	public boolean remove(T anEntry);	/** Removes all entries from this set. */	public void clear();	/** Tests whether this set contains a given entry.	    @param anEntry  the object that is the desired entry	    @return true if the set contains anEntry, or false if not */	public boolean contains(T anEntry);	/** Gets the size of this set.	    @return the integer number of entries currently in the set */	public int getCurrentSize();	/** Sees whether this set is empty.	    @return true if the set is empty, or false if not */	public boolean isEmpty();	/** Retrieves all entries that are in this set.		 @return a newly allocated array of all the entries in the set */	public T[] toArray();      /** Creates an iterator that traverses all entries in this set.       @return an iterator that provides sequential access to the entries               in the set */   public Iterator<T> getIterator();   	/** Creates a new set that combines the contents of this set	    and another set.	    @param anotherSet  the second set	    @return a set that is the union of the two sets */	public SetInterface<T> union(SetInterface<T> anotherSet);	/** Creates a new set that contains those items that occur	    in both this set and another set.	    @param anotherSet  the second set	 *  @return a set that is the intersection of the two sets */	public SetInterface<T> intersection(SetInterface<T> anotherSet);} // end SetInterface